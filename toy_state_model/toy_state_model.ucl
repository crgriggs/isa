MODEL ToyStateModel

typedef opcode : enum{call, jmp, other};

CONST

(* ----- callInst MODULE ----- *)
MODULE callInst

INPUT
State.var1 : BITVEC[16];

VAR
var1 : BITVEC[16];

CONST

DEFINE

ASSIGN
init[var1] := 0x4444;
next[var1] := State.var1 +_16 0x0002;

(* ----- jmpInst MODULE ----- *)
MODULE jmpInst

INPUT
State.var1 : BITVEC[16];

VAR
var1 : BITVEC[16];

CONST

DEFINE

ASSIGN
init[var1] := 0x4444;
next[var1] := State.var1 +_16 0x0003;

(* ----- STATE MODULE ----- *)
MODULE State

INPUT

VAR
var1 : BITVEC[16];
instruction_opcode : opcode;

CONST

DEFINE

ASSIGN
init[instruction_opcode] := {jmp, call, other};
next[instruction_opcode] := {jmp, call, other};

init[var1] := 0xF000;
next[var1] := case
  (instruction_opcode = call) : next[callInst.var1];
  (instruction_opcode = jmp) : next[jmpInst.var1];
  default : var1;
esac;

(* ----- CONTROL MODULE ----- *)
CONTROL

EXTVAR

STOREVAR

VAR

CONST

DEFINE

EXEC
simulate(2);
decide(State.var1 != 0xF005);
(*
simulate(1);
print(State.var1);
*)
