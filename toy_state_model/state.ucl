(*----- header.txt -----*)
MODEL StateModel

typedef OPCODE : enum{syscall, sysret, exception, other};

CONST

(*----- ./cs_selector//exception.txt -----*)
MODULE exceptionInst

INPUT
State.rsp : BITVEC[2];

VAR
rsp : BITVEC[2];
cpl : BITVEC[2];

CONST

DEFINE

ASSIGN

init[rsp] := {0x00, 0x01, 0x10, 0x11};
next[rsp] := {0x00, 0x01, 0x10, 0x11}; (* TODO *)

init[cpl] := {0x00, 0x01, 0x10, 0x11};
next[cpl] := {0x00, 0x01, 0x10, 0x11}; (* TODO *)

(*----- ./cs_selector//syscall.txt -----*)
MODULE syscallInst

INPUT
State.cs_l : BITVEC[1];
State.cs_selector : BITVEC[16];
State.IA32_EFER_LMA : BITVEC[64];
State.IA32_EFER_SCE : BITVEC[64];
State.IA32_STAR : BITVEC[64];

VAR
cs_selector : BITVEC[16];

CONST

DEFINE

ASSIGN

init[cs_selector] := 0x0000;
next[cs_selector] := case
    State.cs_l != 1 : State.cs_selector;
    State.IA32_EFER_LMA != 1 : State.cs_selector;
    State.IA32_EFER_SCE != 1 : State.cs_selector;
    default : (State.IA32_STAR # [47:32]) && (0xFFFC);
esac;

(*----- ./cs_selector//sysret.txt -----*)
MODULE sysretInst

INPUT
State.cs_selector : BITVEC[16];
State.IA32_STAR : BITVEC[64];
State.cpl : BITVEC[2];

VAR

(* Operands *)
ret_to_64_bit : TRUTH;  (* 0: encoding 0F07, 1: encoding REX.W+0F07 *)

(* State *)
exception_raised : TRUTH;
cs_selector : BITVEC[16];

CONST

DEFINE
cs_selector_64 := State.IA32_STAR # [63:48] || 0x3;
cs_selector_32 := (State.IA32_STAR # [63:48] +_16 0x0010) || 0x3;

ASSIGN

init[ret_to_64_bit] := {true, false};
next[ret_to_64_bit] := {true, false};

init[cs_selector] := 0x0000;
next[cs_selector] := case
	ret_to_64_bit : cs_selector_64;
	default : cs_selector_32;
esac;

init[exception_raised] := false;
next[exception_raised] := case

    (* Not in 64-Bit Mode or SYSCALL/SYSRET not enabled in IA32_EFER *)
    (* #UD *)
    State.cs_l != 1 : true;
    State.IA32_EFER_LMA != 1 : true;
    State.IA32_EFER_SCE != 1 : true;

    (* #GP *)
    State.cpl != 0 : true;
    (* ~is_canonical(State.rcx) : true; *)

    default: false;
esac;

(*----- state.txt -----*)
MODULE State

INPUT
instruction_opcode : OPCODE;

VAR
prev_instruction_opcode : OPCODE;

exception_raised : TRUTH;
prev_exception_raised : TRUTH;
cs_selector : BITVEC[16];
cs_l : BITVEC[1];
cpl : BITVEC[2];
rsp : BITVEC[2];
IA32_EFER_LMA : BITVEC[64];
IA32_EFER_SCE : BITVEC[64];
IA32_STAR: BITVEC[64];

CONST
init_cs_l : BITVEC[1];
init_IA32_EFER_LMA : BITVEC[64];
init_IA32_EFER_SCE : BITVEC[64];
init_IA32_STAR : BITVEC[64];

DEFINE

ASSIGN

init[prev_instruction_opcode] := other;
next[prev_instruction_opcode] := instruction_opcode;

init[prev_exception_raised] := false;
next[prev_exception_raised] := exception_raised;

init[exception_raised] := false;
next[exception_raised] := case
  (instruction_opcode = sysret) : next[sysretInst.exception_raised];
  (* (instruction_opcode = syscall) : next[syscallInst.exception_raised]; *)
  (* (instruction_opcode = exception) : next[exceptionInst.exception_raised]; *)
  default : false;
esac;

init[cs_selector] := 0x000F;
next[cs_selector] := case
  (instruction_opcode = sysret) : next[sysretInst.cs_selector];
  (instruction_opcode = syscall) : next[syscallInst.cs_selector];
  (* (instruction_opcode = exception) : next[exceptionInst.cs_selector]; *)
  default : cs_selector;
esac;

init[cpl] := {0x00, 0x01, 0x10, 0x11};
next[cpl] := case
  (* (instruction_opcode = sysret) : next[sysretInst.cpl]; *)
  (* (instruction_opcode = syscall) : next[syscallInst.cpl]; *)
  (instruction_opcode = exception) : next[exceptionInst.cpl];
  default : cpl;
esac;

init[rsp] := {0x00, 0x01, 0x10, 0x11};
next[rsp] := case
  (* (instruction_opcode = sysret) : next[sysretInst.rsp]; *)
  (* (instruction_opcode = syscall) : next[syscallInst.rsp]; *)
  (instruction_opcode = exception) : next[exceptionInst.rsp];
  default : rsp;
esac;

init[cs_l] := init_cs_l;
next[cs_l] := cs_l;

init[IA32_EFER_LMA] := init_IA32_EFER_LMA;
next[IA32_EFER_LMA] := IA32_EFER_LMA;

init[IA32_EFER_SCE] := init_IA32_EFER_SCE;
next[IA32_EFER_SCE] := IA32_EFER_SCE;

init[IA32_STAR] := init_IA32_STAR;
next[IA32_STAR] := IA32_STAR;

(*----- control.txt -----*)
(* ----- CONTROL MODULE ----- *)
CONTROL

EXTVAR
(* Controlling values at each step:
 * A variable must be declared here with a type and default value in order to
 * control its value at each step. Then, in the EXEC section, set the value for
 * a simulation step like this:
 *
 *     instruction_opcode[0] := syscall;
 *
 * The simulation steps are 0-indexed, so the statement above will set the
 * first simulation step's opcode to syscall.
 *
 * TODO: EXTVARs can't be printed for some reason:
 *       "print(instruction_opcode[0]);" causes a syntax error.
 *       "print(instruction_opcode);" errors with "Uncaught exception: CSExn".
 *)
instruction_opcode : OPCODE := case
    State.exception_raised : exception;
    default : {syscall, sysret, exception, other};
esac;

STOREVAR

VAR

CONST

DEFINE

EXEC
(* To keep output clean and to keep test and assertions from interfering with
 * eachother, only uncomment one of the blocks below:
 *)

(* Test the case statement for cs_selector *)
(*
instruction_opcode[0] := syscall;
instruction_opcode[1] := sysret;
simulate(1);
decide(State.cs_selector = syscallInst.cs_selector);
simulate(1);
decide(State.cs_selector = sysretInst.cs_selector);
*)

(* Make sure exception_raised forces the next instruction to "exception" *)
(*
simulate(1);
decide(State.prev_exception_raised => instruction_opcode = exception);
*)

