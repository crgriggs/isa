(* ----- CONTROL MODULE ----- *)
CONTROL

EXTVAR
(* Controlling values at each step:
 * A variable must be declared here with a type and default value in order to
 * control its value at each step. Then, in the EXEC section, set the value for
 * a simulation step like this:
 *
 *     instruction_opcode[0] := syscall;
 *
 * The simulation steps are 0-indexed, so the statement above will set the
 * first simulation step's opcode to syscall.
 *
 * TODO: EXTVARs can't be printed for some reason:
 *       "print(instruction_opcode[0]);" causes a syntax error.
 *       "print(instruction_opcode);" errors with "Uncaught exception: CSExn".
 *)
instruction_opcode : OPCODE := case
    State.exception_raised : exception;
    default : {syscall, sysret, exception, other};
esac;

STOREVAR

VAR

CONST

DEFINE

EXEC
(* To keep output clean and to keep test and assertions from interfering with
 * eachother, only uncomment one of the blocks below:
 *)

(* Test the case statement for cs_selector *)
(*
instruction_opcode[0] := syscall;
instruction_opcode[1] := sysret;
simulate(1);
decide(State.cs_selector = syscallInst.cs_selector);
simulate(1);
decide(State.cs_selector = sysretInst.cs_selector);
*)

(* Make sure exception_raised forces the next instruction to "exception" *)
(*
simulate(1);
decide(State.prev_exception_raised => instruction_opcode = exception);
*)
