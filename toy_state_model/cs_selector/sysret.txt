MODULE sysretInst

INPUT
State.cs_selector : BITVEC[16];
State.IA32_STAR : BITVEC[64];
State.cpl : USER_OR_SYS;

VAR

(* Operands *)
ret_to_64_bit : TRUTH;  (* 0: encoding 0F07, 1: encoding REX.W+0F07 *)

(* State *)
exception_raised : TRUTH;
cs_selector : BITVEC[16];

CONST

DEFINE
cs_selector_64 := State.IA32_STAR # [63:48] || 0x3;
cs_selector_32 := (State.IA32_STAR # [63:48] +_16 0x0010) || 0x3;

ASSIGN

init[ret_to_64_bit] := {true, false};
next[ret_to_64_bit] := {true, false};

init[cs_selector] := 0x0000;
next[cs_selector] := case
	ret_to_64_bit : cs_selector_64;
	default : cs_selector_32;
esac;

init[exception_raised] := false;
next[exception_raised] := case

    (* Not in 64-Bit Mode or SYSCALL/SYSRET not enabled in IA32_EFER *)
    (* #UD *)
    State.cs_l != 1 : true;
    State.IA32_EFER_LMA != 1 : true;
    State.IA32_EFER_SCE != 1 : true;

    (* #GP *)
    State.cpl != sys : true;
    (* ~is_canonical(State.rcx) : true; *)  (* TODO *)

    default: false;
esac;
