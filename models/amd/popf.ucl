MODEL AMDPOPF

typedef exitMode : enum {gp, normal};

CONST
(*Control Register 0 variables*)
PE : BITVEC[1];
VME : BITVEC[1];


cpl : BITVEC[3];
16_BIT : BITVEC[1];

RFLAGS_I : BITVEC[64];
RFLAGS_S : BITVEC[64];




(*** MODULE ***)
MODULE popf
INPUT

VAR

(* System registers *)
rflags : BITVEC[64];

(* Exit status *)
exitStatus : exitMode;


CONST
DEFINE
(* Single-bit values *)
b0 := 0x0 # [0:0];
b1 := 0x1 # [0:0];


gp_fault := case
	((PE = b1) & (rflags # [17:17] = b1)) & (rflags # [13:12] = b1@b1) & ((VME = b1) & (16_BIT = b1)) : true;
	((PE = b1) & (rflags # [17:17] = b1)) & (rflags # [13:12] = b1@b1) & (~((VME = b1) & (16_BIT = b1))) & (~(((RFLAGS_S # [9:9] = b1) & (rflags # [20:20] = b1)) | (RFLAGS_S # [8:8] = b1))) : true;
	default : false;
esac;

popf_real := case
	PE = b0 : true;
	default : false;
esac;

rflags_real := RFLAGS_S # [15:0] @ b0 @ rflags # [17:17] @ RFLAGS_S # [18:18] @ rflags # [20:19] @ RFLAGS_S # [63:21];

popf_protected := case
	((PE = b1) & (rflags # [17:17] = b0)) : true;
	default : false;
esac;

popf_protected_tt := RFLAGS_S # [8:0] @ rflags # [9:9] @ RFLAGS_S # [11:10] @ rflags # [13:12] @ RFLAGS_S # [15:14] @ b0 @ rflags # [17:17] @ RFLAGS_S # [18:18] @ rflags # [20:19] @ RFLAGS_S # [63:21];
popf_protected_tf := RFLAGS_S # [8:0] @ rflags # [9:9] @ RFLAGS_S # [15:10] @ b0 @ rflags # [17:17] @ RFLAGS_S # [18:18] @ rflags # [20:19] @ RFLAGS_S # [63:21];
popf_protected_ft := RFLAGS_S # [11:0] @ rflags # [13:12] @ RFLAGS_S # [15:14] @ b0 @ rflags # [17:17] @ RFLAGS_S # [18:18] @ rflags # [20:19] @ RFLAGS_S # [63:21];
popf_protected_ff := RFLAGS_S # [15:0] @ b0 @ rflags # [17:17] @ RFLAGS_S # [18:18] @ rflags # [20:19] @ RFLAGS_S # [63:21];

popf_virtual := case
	((PE = b1) & (rflags # [17:17] = b1)) : true;
	default : false;
esac;

popf_virtual_t := RFLAGS_S # [8:0] @ rflags # [9:9] @ RFLAGS_S # [11:10] @ rflags # [13:12] @ RFLAGS_S # [15:14] @ b0 @ rflags # [63:17];


(* 2-byte move (copies lower 16 bits of temp_src to temp_dest, preserving the upper 48 bits of temp_dest*)

popf_virtual_f := RFLAGS_S # [11:0] @ rflags # [13:12] @ RFLAGS_S # [15:14] @ b0 @ rflags # [17:17] @ RFLAGS_S # [18:18] @ rflags # [20:19] @ RFLAGS_S # [63:21];


ASSIGN
(* Define how state variables are updated. *)

init[exitStatus] := normal;
next[exitStatus] := case
	gp_fault : gp;
	default : normal;
esac;


init[rflags] := RFLAGS_I;
next[rflags] := case
	popf_real : rflags_real;
	popf_protected & cpl <= RFLAGS_S # [13:12] & cpl = 0x0 : popf_protected_tt;
	popf_protected & cpl <= RFLAGS_S # [13:12] & cpl > 0x0 : popf_protected_tf;
	popf_protected & cpl > RFLAGS_S # [13:12] & cpl = 0x0 : popf_protected_ft;
	popf_protected & cpl > RFLAGS_S # [13:12] & cpl > 0x0 : popf_protected_ff;
	popf_virtual & rflags # [13:12] < 0x3 : popf_virtual_f;
	popf_virtual & rflags # [13:12] = 0x3 & next[exitStatus] = normal : popf_virtual_t;
	default : rflags;
esac;



(*** CONTROL ***)
CONTROL
EXTVAR
STOREVAR
VAR


CONST
DEFINE


EXEC
initialize;
simulate(1);

