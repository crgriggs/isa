MODEL amdSysret

typedef exitStatus : enum{ud, gp, normal};


CONST
EFERSCE : BITVEC[1];
64_BIT : BITVEC[1];
PE : BITVEC[1];
MSR_STAR_SYSRET_CS : BITVEC[16];


CS_I : BITVEC[80];
SS_I : BITVEC[80];
RIP_I : BITVEC[64];
RFLAGS_I : BITVEC[64];
R11_I : BITVEC[64];
RCX_I : BITVEC[64];
CPL_I : BITVEC[3];

MODULE sysret

INPUT

VAR
cs : BITVEC[80];
ss : BITVEC[80];

(* System registers *)
rip : BITVEC[64];
rflags : BITVEC[64];

(* General purpose registers *)
r11 : BITVEC[64];
rcx : BITVEC[64];

(* Exit status *)
exitStatus : exitMode;

(* Current privilege level *)
cpl : BITVEC[3];


CONST

DEFINE

(* Single-bit values *)
b0 := 0x0 # [0:0];
b1 := 0x1 # [0:0];

(* CS fields *)
cs_selector_64 := MSR_STAR_SYSRET_CS; (*CS # [79:64]*)
cs_selector := MSR_STAR_SYSRET_CS +_16 0x000F; (*CS # [79:64]*)

cs_segmentLimit := 0xFFFF; (*CS # [15:0]*)
cs_baseAddress := 0x0000; (*CS # [31:16]*)
cs_baseAddress2 := 0x00; (*CS # [39:32]*)
cs_type := cs # [43:40]; (*CS # [43:40]*)
cs_s := cs # [44:44]; (*CS # [44:44]*)
cs_dpl := b1@b1; (*CS # [46:45]. '@' does concatenation. *)
cs_p := cs # [47:47]; (*CS # [47:47]*)
cs_segmentLimit2 := 0xF; (*CS # [51:48]*)
cs_avl := cs # [52:52];
cs_l_64 := b0; (*CS # [53:53]*)
cs_l := b1; (*CS # [53:53]*)
cs_db_64 := b1; (*CS # [54:54]*)
cs_db := b0; (*CS # [54:54]*)
cs_g := cs # [55:55]; (*CS # [55:55]*)
cs_baseAddress3 := 0x00; (*CS # [63:56]*)

(* Use the '@' to concatenate bitvectors. *)
cs_register := (cs_selector @ cs_baseAddress3 @ cs_g @ cs_db @ cs_l @ cs_avl @ cs_segmentLimit2 @ cs_p @ cs_dpl @ cs_s @ cs_type @ cs_baseAddress2 @ cs_baseAddress @ cs_segmentLimit) || 0x3;

cs_register_64 := (cs_selector_64 @ cs_baseAddress3 @ cs_g @ cs_db_64 @ cs_l_64 @ cs_avl @ cs_segmentLimit2 @ cs_p @ cs_dpl @ cs_s @ cs_type @ cs_baseAddress2 @ cs_baseAddress @ cs_segmentLimit) || 0x3;


(* SS fields *)
ss_selector := (MSR_STAR_SYSRET_CS +_16 0x0008); (*SS # [79:64]*)

ss_register := ss_selector @ ss # [63:0];

ud_fault := case
	(EFERSCE = 0x0) : true;
	default : false;
esac;

gp_fault := case
	(!!((PE = 0x1 > 0) | CANONICAL = 0x0 : true;
	default : false;
esac;

ASSIGN

init[exitStatus] := normal;
next[exitStatus] := case
	ud_fault : ud;
	gp_fault : gp;
	default : normal;
esac;

init[r11] := R11_I;
init[rcx] := RCX_I;

init[rip] := RIP_I;
next[rip] := case
	(64_BIT = b1) & next[exitStatus] = normal: RCX;
	(64_BIT = b0) & next[exitStatus] = normal: 0x00000000 @ ECX;
	default : rip;
esac;


init[rflags] := RFLAGS_I;
next[rflags] := case
	next[exitStatus] = normal : (r11 && 0x3C7FD7) || 0x3;
	default : rflags;
esac;

init[cs] := CS_I;
next[cs] := case
	(64_BIT = b1) & (next[exitStatus] = normal) : cs_register_64;
	(64_BIT = b0) & (next[exitStatus] = normal) : cs_register;
	default : cs;
esac;

init[cpl] := CPL_I;
next[cpl] := case
	next[exitStatus] = normal : 3;
	default : cpl;
esac;

init[ss] := SS_I;
next[ss] := case
	next[exitStatus] = normal : ss_register;
	default : ss;
esac;

(*----- CONTROL MODULE -----*)
CONTROL
EXTVAR
STOREVAR
VAR
CONST
DEFINE
sysretBug := (sysret.exitStatus != normal) =>
				(sysret.cpl = 3);
EXEC
initialize;
simulate(1);
decide(sysretBug);