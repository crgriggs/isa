MODEL x86

typedef exitMode : enum {ud, normal};

CONST
IA32_EFERSCE : BITVEC[1];
MSR_SFMASK : BITVEC[64];
MSR_STAR : BITVEC[64];

CS_I : BITVEC[80];
SS_I : BITVEC[80];
RIP_I : BITVEC[64];
RFLAGS_I : BITVEC[64];
R11_I : BITVEC[64];
RCX_I : BITVEC[64];
CPL_I : BITVEC[3];

(*** MODULE ***)
MODULE Syscall
INPUT

VAR
(* 
Figure 5-1 Descriptor Fields Used for Protection;
Figure 3-8 Segment Descriptor;
Figure 3-7 Segment Registers
*)

(* 
Code segment and stack segment registers.
I.e., code (stack) segment caches. 
Holds both CS (SS) selector and CS (SS) descriptor info.
I couldn't find a description of the registers' layouts,
so I am just guessing that the 16-bit selector takes up 
the high bits and the rest are laid out like the segment
descriptors. Could have also just made each field a
separate state variable. *)
cs : BITVEC[80];
ss : BITVEC[80];

(* System registers *)
rip : BITVEC[64];
rflags : BITVEC[64];

(* General purpose registers *)
r11 : BITVEC[64];
rcx : BITVEC[64];

(* Exit status *)
exitStatus : exitMode;

(* Current privilege level *)
cpl : BITVEC[3];

CONST
DEFINE
(* Single-bit values *)
b0 := 0x0 # [0:0];
b1 := 0x1 # [0:0];

(* CS fields *)
cs_selector := (MSR_STAR # [47:32] && 0xFFFC); (*CS # [79:64]*)
cs_segmentLimit := 0xFFFF; (*CS # [15:0]*)
cs_baseAddress := 0x0000; (*CS # [31:16]*)
cs_baseAddress2 := 0x00; (*CS # [39:32]*)
cs_type := 0xB; (*CS # [43:40]*)
cs_s := b1; (*CS # [44:44]*)
cs_dpl := b0@b0; (*CS # [46:45]. '@' does concatenation. *)
cs_p := b1; (*CS # [47:47]*)
cs_segmentLimit2 := 0xF; (*CS # [51:48]*)
cs_avl := cs # [52:52];
cs_l := b1; (*CS # [53:53]*)
cs_db := b0; (*CS # [54:54]*)
cs_g := b1; (*CS # [55:55]*)
cs_baseAddress3 := 0x00; (*CS # [63:56]*)

(* Use the '@' to concatenate bitvectors. *)
cs_register := cs_selector @ cs_baseAddress3 @ cs_g @ cs_db @ cs_l @ cs_avl @ cs_segmentLimit2 @ cs_p @ cs_dpl @ cs_s @ cs_type @ cs_baseAddress2 @ cs_baseAddress @ cs_segmentLimit;

(* SS fields *)
ss_selector := (MSR_STAR # [47:32]) +_16 0x0008; (*SS # [79:64]*)
ss_segmentLimit := 0xFFFF; (*SS # [15:0]*)
ss_baseAddress := 0x0000; (*SS # [31:16]*)
ss_baseAddress2 := 0x00; (*SS # [39:32]*)
ss_type := 0x3; (*SS # [43:40]*)
ss_s := b1; (*SS # [44:44]*)
ss_dpl := b0@b0; (*SS # [46:45]*)
ss_p := b1; (*SS # [47:47]*)
ss_segmentLimit2 := 0xF; (*SS # [51:48]*)
ss_avl := ss # [52:52];
ss_l := ss # [53:53];
ss_db := ss # [54:54]; (*SS # [54:54]*)
ss_g := ss # [55:55]; (*SS # [55:55]*)
ss_baseAddress3 := 0x00; (*SS # [63:56]*)

ss_register := ss_selector @ ss_baseAddress3 @ ss_g @ ss_db @ ss_l @ ss_avl @ ss_segmentLimit2 @ ss_p @ ss_dpl @ ss_s @ ss_type @ ss_baseAddress2 @ ss_baseAddress @ ss_segmentLimit;

rflags1 := rflags # [15:0] && MSR_SFMASK # [15:0];
rflags2 := rflags # [63:17] && MSR_SFMASK # [63:17];
rflags_register := rflags1 @ b0 @ rflags2;

ud_fault := case
    IA32_EFERSCE != 0x1 : true;
	default : false;
esac;



ASSIGN
(* Define how state variables are updated. *)

init[exitStatus] := normal;
next[exitStatus] := case
	ud_fault : ud;
	default : normal;
esac;

init[rcx] := RCX_I;
next[rcx] := case
	next[exitStatus] = normal : rip;
	default : rcx;
esac;

init[rip] := RIP_I;
next[rip] := case
	next[exitStatus] = normal : MSR_LSTAR;
	default : rip;
esac;

init[r11] := R11_I;
next[r11] := case
	next[exitStatus] = normal : rflags;
	default : r11;
esac;

init[rflags] := RFLAGS_I;
next[rflags] := case
	next[exitStatus] = normal : rflags_register;
	default : rflags;
esac

init[cs] := CS_I;
next[cs] := case
	next[exitStatus] = normal : cs_register;
	default : cs;
esac;

init[cpl] := CPL_I;
next[cpl] := case
	next[exitStatus] = normal : 0;
	default : cpl;
esac;

init[ss] := SS_I;
next[ss] := case
	next[exitStatus] = normal : ss_register;
	default : ss;
esac;


(*** CONTROL ***)
CONTROL
EXTVAR
STOREVAR
VAR


CONST
DEFINE
phi := Syscall.cpl = 0;

EXEC
initialize;
simulate(1);
decide(phi);