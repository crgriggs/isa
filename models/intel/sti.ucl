MODEL x86

typedef exitMode : enum {gp, normal};

CONST
(*Control Register 0 variables*)
PE : BITVEC[1];
VME : BITVEC[1];

(*Control Register 4 variables*)
PVI : BITVEC[1];


cpl : BITVEC[2];
(*0-16bit, 1-32bit, >1-64bit*)
OPSIZE : BITVEC[2];

64bitmode : BITVEC[1];

RFLAGS_I : BITVEC[64];




(*** MODULE ***)
MODULE sti
INPUT

VAR

(* System registers *)
rflags : BITVEC[64];

(* Exit status *)
exitStatus : exitMode;


CONST
DEFINE
(* Single-bit values *)
b0 := 0x0 # [0:0];
b1 := 0x1 # [0:0];


vm := rflags # [17:17];
iopl := rflags # [13:12];
vip := rflags # [20:20];

16bit := case
	OPSIZE = 0x0 : true;
	default : false;
esac;

32bit := case
	OPSIZE = 0x1 : true;
	default : false;
esac;

64bit := case
    OPSIZE > 0x1 : true;
	default : false;
esac;

gp_fault := case
	PE = b1 & vm = 0 & iopl < cpl & (cpl < 0x3 | PVI = 0x0) : true;
	PE = b1 & vm = 1 & iopl < 0x3 & (vip = b1 | VME = b0) : true; 
	default : false;
esac;




ASSIGN
(* Define how state variables are updated. *)

init[exitStatus] := normal;
next[exitStatus] := case
	gp_fault : gp;
	default : normal;
esac;


init[rflags] := RFLAGS_I;
next[rflags] := case
	PE = b0: rflags # [8:0] @ b1 @ rflags # [63:10];
	PE = b1 & vm = 0 & iopl >= cpl : rflags # [8:0] @ b1 @ rflags # [63:10];
	PE = b1 & vm = 0 & iopl < cpl & cpl = 0x3 & PVI = 0x1: rflags # [18:0] @ b1 @ rflags # [63:20];
	PE = b1 & vm = 1 & iopl = 0x3 : rflags # [8:0] @ b1 @ rflags # [63:10];
	PE = b1 & vm = 1 & iopl < 0x3 & vip = b0 & VME = b1 : rflags # [18:0] @ b1 @ rflags # [63:20];
	default : rflags;
esac;



(*** CONTROL ***)
CONTROL
EXTVAR
STOREVAR
VAR
CONST
DEFINE

cplVsIopl := (cpl > RFLAGS_I # [13:12]) =>
				(sti.exitStatus = gp);

EXEC
initialize;
simulate(1);

decide(cplVsIopl);