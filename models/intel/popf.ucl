MODEL x86

typedef exitMode : enum {gp, normal};

CONST
(*Control Register 0 variables*)
PE : BITVEC[1];
VME : BITVEC[1];


cpl : BITVEC[3];
(*0-16bit, 1-32bit, >1-64bit*)
OPSIZE : BITVEC[2];

RFLAGS_I : BITVEC[64];
RFLAGS_S : BITVEC[64];




(*** MODULE ***)
MODULE Syscall
INPUT

VAR

(* System registers *)
rflags : BITVEC[64];

(* Exit status *)
exitStatus : exitMode;


CONST
DEFINE
(* Single-bit values *)
b0 := 0x0 # [0:0];
b1 := 0x1 # [0:0];


vm = rflags # [20:20];
iopl = rflags # [13:12];
vip = rflags # [20:20];

16bit := case
	OPSIZE = 0x0 : true;
	default : false;
esac;

32bit := case
	OPSIZE = 0x1 : true;
	default : false;
esac;

64bit := case
    OPSIZE > 0x1 : true;
	default : false;
esac;

gp_fault := case
	vm = b1 & VME = b0 & iopl < 0x3: true;
	vm = b1 & VME = b1 & iopl < 0x3 & 32bit: true;	
	vm = b1 & VME = b1 & iopl < 0x3 & !!(32bit) & vip = b1 & RFLAGS_S # [9:9] = b1 : true;
	default : false;
esac;

(*the naming scheme is unchangedVar_unchangedVar...setVar0_setVar1..._popSize*)

iopl_16 := RFLAGS_S # [11:0]  @ RFLAGS_I # [13:12] @ RFLAGS_S # [15:14];
vip_vif_vm_iopl_rf0_32 := RFLAGS_S # [11:0]  @ RFLAGS_I # [13:12] @ RFLAGS_S # [15:14] @ b0 @ rflags # [17:17] @ RFLAGS_S # [18:18] @ rflags # [20:19] @ RFLAGS_S # [31:21] @ rflags # [63:32];
iopl_if_vif1_16 := RFLAGS_S # [8:0] @ RFLAGS_I # [9:9] @ RFLAGS_S # [11:10] @ RFLAGS_I # [13:12] @ RFLAGS_S # [15:14] @ rflags # [18:16] @ RFLAGS_S # [9:9] @ rflags # [63:16];
vip_vif_vm_iopl_if_rf0_64 := RFLAGS_S # [8:0] @ RFLAGS_I # [9:9] @ RFLAGS_S # [11:10] @ RFLAGS_I # [13:12] @ RFLAGS_S # [15:14] @ b0 @ rflags # [17:17] @ RFLAGS_S # [18:18] @ rflags # [20:19] @ RFLAGS_S # [63:21];
vip_vif_vm_iopl_rf0_64 := RFLAGS_S # [11:0] @ RFLAGS_I # [13:12] @ RFLAGS_S # [15:14] @ b0 @ rflags # [17:17] @ RFLAGS_S # [18:18] @ rflags # [20:19] @ RFLAGS_S # [63:21];
vip_vif_vm_iopl_if_rf0_32 := RFLAGS_S # [8:0] @ RFLAGS_I # [9:9] @ RFLAGS_S # [11:10] @ RFLAGS_I # [13:12] @ RFLAGS_S # [15:14] @ b0 @ rflags # [17:17] @ RFLAGS_S # [18:18] @ rflags # [20:19] @ RFLAGS_S # [31:21] @ rflags # [63:32];
vip_vif_vm_rf0_64 := RFLAGS_S # [15:0] @ b0 @ rflags # [17:17] @ RFLAGS_S # [18:18] @ rflags # [20:19] @ RFLAGS_S # [63:21];
vip_vif_vm__rf0_32 := RFLAGS_S # [15:0] @ b0 @ rflags # [17:17] @ RFLAGS_S # [18:18] @ rflags # [20:19] @ RFLAGS_S # [31:21] @ rflags # [63:32];



ASSIGN
(* Define how state variables are updated. *)

init[exitStatus] := normal;
next[exitStatus] := case
	gp_fault : gp;
	default : normal;
esac;


init[rflags] := RFLAGS_I;
next[rflags] := case
	vm = b1 & VME = b0 & iopl = 0x3 & 32bit: vip_vif_vm_iopl_rf0_32;
	vm = b1 & VME = b0 & iopl = 0x3 & !!32bit: iopl_16; 
	vm = b1 & VME = b1 & iopl < 0x3 & !!32bit & (!!(vip = b1 & RFLAGS_S # [9:9] = b1)) : iopl_if_vif1_16
	vm = b1 & VME = b1 & iopl = 0x3 & 32bit: vip_vif_vm_iopl_rf0_32;
	vm = b1 & VME = b1 & iopl = 0x3 & !!32bit: iopl_16;
	vm = b0 & cpl > 0x0 & 16bit : iopl_16;
	vm = b0 & cpl > 0x0 & 64bit & cpl > iopl: vip_vif_vm_iopl_if_rf0_64;
	vm = b0 & cpl > 0x0 & 64bit & cpl <= iopl: vip_vif_vm_iopl_rf0_64;
	vm = b0 & cpl > 0x0 & 32bit & cpl > iopl: vip_vif_vm_iopl_if_rf0_32;
	vm = b0 & cpl > 0x0 & 32bit & cpl <= iopl: vip_vif_vm_iopl_rf0_32;
	vm = b0 & cpl = 0x0 & 16bit : RFLAGS_S # [15:0] @ rflags # [63:15];
	vm = b0 & cpl = 0x0 & 64bit :vip_vif_vm_rf0_64;
	vm = b0 & cpl = 0x0 & 64bit :vip_vif_vm_rf0_32;
	default : rflags;
esac



(*** CONTROL ***)
CONTROL
EXTVAR
STOREVAR
VAR


CONST
DEFINE
phi := Syscall.cpl = 0;

EXEC
initialize;
simulate(1);
decide(phi);